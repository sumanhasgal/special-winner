{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "provenance": [],
      "mount_file_id": "17Q-AqcNQ4aWibRojomBTg17uzRAVUfYF",
      "authorship_tag": "ABX9TyP3ueBZP/FkFGlIRWwjtyfm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sumanhasgal/special-winner/blob/main/ted%20talk%20views\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Ted Talk Views**"
      ],
      "metadata": {
        "id": "H3rOxf7R8D54"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TED is devoted to spreading powerful ideas on just about any topic. These datasets contain over\n",
        "4,000 TED talks including transcripts in many languages.\n",
        "Founded in 1984 by Richard Salman as a nonprofit organization\n",
        "that aimed at bringing experts from the fields of Technology, Entertainment, and Design\n",
        "together, TED Conferences have gone on to become the Mecca of ideas from virtually all\n",
        "walks of life. As of 2015, TED and its sister TEDx chapters have published more than 2000\n",
        "talks for free consumption by the masses and its speaker list boasts of the likes of Al Gore,\n",
        "Jimmy Wales, Shahrukh Khan, and Bill Gates.\n",
        "The main objective is to build a predictive model, which could help in predicting the views of\n",
        "the videos uploaded on the TEDx website."
      ],
      "metadata": {
        "id": "tlmXYKdk8Awz"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "rgDDXo157-RG"
      },
      "outputs": [],
      "source": [
        "#let's import the modules\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import seaborn as sns\n",
        "\n",
        "from datetime import datetime\n",
        "import datetime as dt\n",
        "import time\n",
        "\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.preprocessing import MultiLabelBinarizer\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.linear_model import Lasso\n",
        "from sklearn.linear_model import Ridge\n",
        "from sklearn.linear_model import ElasticNet\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.ensemble import GradientBoostingRegressor\n",
        "\n",
        "from sklearn.model_selection import cross_validate\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.model_selection import RepeatedStratifiedKFold\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "from sklearn.metrics import log_loss\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/drive/MyDrive/Regression capstone/Ted Talk Views Prediction/data_ted_talks.csv')"
      ],
      "metadata": {
        "id": "qxpWhfEU8dPJ"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 635
        },
        "id": "ABOjWWBv8s63",
        "outputId": "22c4160a-8d55-48e9-aa9b-992913e57ee3"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   talk_id                            title         speaker_1  \\\n",
              "0        1      Averting the climate crisis           Al Gore   \n",
              "1       92  The best stats you've ever seen      Hans Rosling   \n",
              "2        7                 Simplicity sells       David Pogue   \n",
              "3       53              Greening the ghetto     Majora Carter   \n",
              "4       66      Do schools kill creativity?  Sir Ken Robinson   \n",
              "\n",
              "              all_speakers                                    occupations  \\\n",
              "0           {0: 'Al Gore'}                      {0: ['climate advocate']}   \n",
              "1      {0: 'Hans Rosling'}  {0: ['global health expert; data visionary']}   \n",
              "2       {0: 'David Pogue'}                  {0: ['technology columnist']}   \n",
              "3     {0: 'Majora Carter'}    {0: ['activist for environmental justice']}   \n",
              "4  {0: 'Sir Ken Robinson'}                    {0: ['author', 'educator']}   \n",
              "\n",
              "                                      about_speakers     views recorded_date  \\\n",
              "0  {0: 'Nobel Laureate Al Gore focused the world’...   3523392    2006-02-25   \n",
              "1  {0: 'In Hans Rosling’s hands, data sings. Glob...  14501685    2006-02-22   \n",
              "2  {0: 'David Pogue is the personal technology co...   1920832    2006-02-24   \n",
              "3  {0: 'Majora Carter redefined the field of envi...   2664069    2006-02-26   \n",
              "4  {0: \"Creativity expert Sir Ken Robinson challe...  65051954    2006-02-25   \n",
              "\n",
              "  published_date    event native_lang  \\\n",
              "0     2006-06-27  TED2006          en   \n",
              "1     2006-06-27  TED2006          en   \n",
              "2     2006-06-27  TED2006          en   \n",
              "3     2006-06-27  TED2006          en   \n",
              "4     2006-06-27  TED2006          en   \n",
              "\n",
              "                                      available_lang  comments  duration  \\\n",
              "0  ['ar', 'bg', 'cs', 'de', 'el', 'en', 'es', 'fa...     272.0       977   \n",
              "1  ['ar', 'az', 'bg', 'bn', 'bs', 'cs', 'da', 'de...     628.0      1190   \n",
              "2  ['ar', 'bg', 'de', 'el', 'en', 'es', 'fa', 'fr...     124.0      1286   \n",
              "3  ['ar', 'bg', 'bn', 'ca', 'cs', 'de', 'en', 'es...     219.0      1116   \n",
              "4  ['af', 'ar', 'az', 'be', 'bg', 'bn', 'ca', 'cs...    4931.0      1164   \n",
              "\n",
              "                                              topics  \\\n",
              "0  ['alternative energy', 'cars', 'climate change...   \n",
              "1  ['Africa', 'Asia', 'Google', 'demo', 'economic...   \n",
              "2  ['computers', 'entertainment', 'interface desi...   \n",
              "3  ['MacArthur grant', 'activism', 'business', 'c...   \n",
              "4  ['children', 'creativity', 'culture', 'dance',...   \n",
              "\n",
              "                                       related_talks  \\\n",
              "0  {243: 'New thinking on the climate crisis', 54...   \n",
              "1  {2056: \"Own your body's data\", 2296: 'A visual...   \n",
              "2  {1725: '10 top time-saving tech tips', 2274: '...   \n",
              "3  {1041: '3 stories of local eco-entrepreneurshi...   \n",
              "4  {865: 'Bring on the learning revolution!', 173...   \n",
              "\n",
              "                                                 url  \\\n",
              "0  https://www.ted.com/talks/al_gore_averting_the...   \n",
              "1  https://www.ted.com/talks/hans_rosling_the_bes...   \n",
              "2  https://www.ted.com/talks/david_pogue_simplici...   \n",
              "3  https://www.ted.com/talks/majora_carter_greeni...   \n",
              "4  https://www.ted.com/talks/sir_ken_robinson_do_...   \n",
              "\n",
              "                                         description  \\\n",
              "0  With the same humor and humanity he exuded in ...   \n",
              "1  You've never seen data presented like this. Wi...   \n",
              "2  New York Times columnist David Pogue takes aim...   \n",
              "3  In an emotionally charged talk, MacArthur-winn...   \n",
              "4  Sir Ken Robinson makes an entertaining and pro...   \n",
              "\n",
              "                                          transcript  \n",
              "0  Thank you so much, Chris. And it's truly a gre...  \n",
              "1  About 10 years ago, I took on the task to teac...  \n",
              "2  (Music: \"The Sound of Silence,\" Simon & Garfun...  \n",
              "3  If you're here today — and I'm very happy that...  \n",
              "4  Good morning. How are you? (Audience) Good. It...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-20b49ad8-f271-4880-96fa-81ff0d379c50\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>talk_id</th>\n",
              "      <th>title</th>\n",
              "      <th>speaker_1</th>\n",
              "      <th>all_speakers</th>\n",
              "      <th>occupations</th>\n",
              "      <th>about_speakers</th>\n",
              "      <th>views</th>\n",
              "      <th>recorded_date</th>\n",
              "      <th>published_date</th>\n",
              "      <th>event</th>\n",
              "      <th>native_lang</th>\n",
              "      <th>available_lang</th>\n",
              "      <th>comments</th>\n",
              "      <th>duration</th>\n",
              "      <th>topics</th>\n",
              "      <th>related_talks</th>\n",
              "      <th>url</th>\n",
              "      <th>description</th>\n",
              "      <th>transcript</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Averting the climate crisis</td>\n",
              "      <td>Al Gore</td>\n",
              "      <td>{0: 'Al Gore'}</td>\n",
              "      <td>{0: ['climate advocate']}</td>\n",
              "      <td>{0: 'Nobel Laureate Al Gore focused the world’...</td>\n",
              "      <td>3523392</td>\n",
              "      <td>2006-02-25</td>\n",
              "      <td>2006-06-27</td>\n",
              "      <td>TED2006</td>\n",
              "      <td>en</td>\n",
              "      <td>['ar', 'bg', 'cs', 'de', 'el', 'en', 'es', 'fa...</td>\n",
              "      <td>272.0</td>\n",
              "      <td>977</td>\n",
              "      <td>['alternative energy', 'cars', 'climate change...</td>\n",
              "      <td>{243: 'New thinking on the climate crisis', 54...</td>\n",
              "      <td>https://www.ted.com/talks/al_gore_averting_the...</td>\n",
              "      <td>With the same humor and humanity he exuded in ...</td>\n",
              "      <td>Thank you so much, Chris. And it's truly a gre...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>92</td>\n",
              "      <td>The best stats you've ever seen</td>\n",
              "      <td>Hans Rosling</td>\n",
              "      <td>{0: 'Hans Rosling'}</td>\n",
              "      <td>{0: ['global health expert; data visionary']}</td>\n",
              "      <td>{0: 'In Hans Rosling’s hands, data sings. Glob...</td>\n",
              "      <td>14501685</td>\n",
              "      <td>2006-02-22</td>\n",
              "      <td>2006-06-27</td>\n",
              "      <td>TED2006</td>\n",
              "      <td>en</td>\n",
              "      <td>['ar', 'az', 'bg', 'bn', 'bs', 'cs', 'da', 'de...</td>\n",
              "      <td>628.0</td>\n",
              "      <td>1190</td>\n",
              "      <td>['Africa', 'Asia', 'Google', 'demo', 'economic...</td>\n",
              "      <td>{2056: \"Own your body's data\", 2296: 'A visual...</td>\n",
              "      <td>https://www.ted.com/talks/hans_rosling_the_bes...</td>\n",
              "      <td>You've never seen data presented like this. Wi...</td>\n",
              "      <td>About 10 years ago, I took on the task to teac...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7</td>\n",
              "      <td>Simplicity sells</td>\n",
              "      <td>David Pogue</td>\n",
              "      <td>{0: 'David Pogue'}</td>\n",
              "      <td>{0: ['technology columnist']}</td>\n",
              "      <td>{0: 'David Pogue is the personal technology co...</td>\n",
              "      <td>1920832</td>\n",
              "      <td>2006-02-24</td>\n",
              "      <td>2006-06-27</td>\n",
              "      <td>TED2006</td>\n",
              "      <td>en</td>\n",
              "      <td>['ar', 'bg', 'de', 'el', 'en', 'es', 'fa', 'fr...</td>\n",
              "      <td>124.0</td>\n",
              "      <td>1286</td>\n",
              "      <td>['computers', 'entertainment', 'interface desi...</td>\n",
              "      <td>{1725: '10 top time-saving tech tips', 2274: '...</td>\n",
              "      <td>https://www.ted.com/talks/david_pogue_simplici...</td>\n",
              "      <td>New York Times columnist David Pogue takes aim...</td>\n",
              "      <td>(Music: \"The Sound of Silence,\" Simon &amp; Garfun...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>53</td>\n",
              "      <td>Greening the ghetto</td>\n",
              "      <td>Majora Carter</td>\n",
              "      <td>{0: 'Majora Carter'}</td>\n",
              "      <td>{0: ['activist for environmental justice']}</td>\n",
              "      <td>{0: 'Majora Carter redefined the field of envi...</td>\n",
              "      <td>2664069</td>\n",
              "      <td>2006-02-26</td>\n",
              "      <td>2006-06-27</td>\n",
              "      <td>TED2006</td>\n",
              "      <td>en</td>\n",
              "      <td>['ar', 'bg', 'bn', 'ca', 'cs', 'de', 'en', 'es...</td>\n",
              "      <td>219.0</td>\n",
              "      <td>1116</td>\n",
              "      <td>['MacArthur grant', 'activism', 'business', 'c...</td>\n",
              "      <td>{1041: '3 stories of local eco-entrepreneurshi...</td>\n",
              "      <td>https://www.ted.com/talks/majora_carter_greeni...</td>\n",
              "      <td>In an emotionally charged talk, MacArthur-winn...</td>\n",
              "      <td>If you're here today — and I'm very happy that...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>66</td>\n",
              "      <td>Do schools kill creativity?</td>\n",
              "      <td>Sir Ken Robinson</td>\n",
              "      <td>{0: 'Sir Ken Robinson'}</td>\n",
              "      <td>{0: ['author', 'educator']}</td>\n",
              "      <td>{0: \"Creativity expert Sir Ken Robinson challe...</td>\n",
              "      <td>65051954</td>\n",
              "      <td>2006-02-25</td>\n",
              "      <td>2006-06-27</td>\n",
              "      <td>TED2006</td>\n",
              "      <td>en</td>\n",
              "      <td>['af', 'ar', 'az', 'be', 'bg', 'bn', 'ca', 'cs...</td>\n",
              "      <td>4931.0</td>\n",
              "      <td>1164</td>\n",
              "      <td>['children', 'creativity', 'culture', 'dance',...</td>\n",
              "      <td>{865: 'Bring on the learning revolution!', 173...</td>\n",
              "      <td>https://www.ted.com/talks/sir_ken_robinson_do_...</td>\n",
              "      <td>Sir Ken Robinson makes an entertaining and pro...</td>\n",
              "      <td>Good morning. How are you? (Audience) Good. It...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20b49ad8-f271-4880-96fa-81ff0d379c50')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-20b49ad8-f271-4880-96fa-81ff0d379c50 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-20b49ad8-f271-4880-96fa-81ff0d379c50');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2WBrdzBF8wx6",
        "outputId": "3cd269b7-9c56-48cf-a5c5-8f3d7e3b0022"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4005, 19)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "KnBP3UPr87tR",
        "outputId": "eb76b3b1-c357-47ad-8217-a1f990a69d2a"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            talk_id         views     comments     duration\n",
              "count   4005.000000  4.005000e+03  3350.000000  4005.000000\n",
              "mean   12432.538327  2.148006e+06   161.997015   724.011236\n",
              "std    17447.576262  3.451226e+06   268.838922   361.775462\n",
              "min        1.000000  0.000000e+00     0.000000    60.000000\n",
              "25%     1252.000000  8.820690e+05    38.000000   393.000000\n",
              "50%     2333.000000  1.375508e+06    89.000000   738.000000\n",
              "75%    23777.000000  2.133110e+06   188.000000   974.000000\n",
              "max    62794.000000  6.505195e+07  6449.000000  3922.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2fb3bc31-2bd0-4fe3-9ebe-75f60752eab8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>talk_id</th>\n",
              "      <th>views</th>\n",
              "      <th>comments</th>\n",
              "      <th>duration</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4005.000000</td>\n",
              "      <td>4.005000e+03</td>\n",
              "      <td>3350.000000</td>\n",
              "      <td>4005.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>12432.538327</td>\n",
              "      <td>2.148006e+06</td>\n",
              "      <td>161.997015</td>\n",
              "      <td>724.011236</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>17447.576262</td>\n",
              "      <td>3.451226e+06</td>\n",
              "      <td>268.838922</td>\n",
              "      <td>361.775462</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>60.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1252.000000</td>\n",
              "      <td>8.820690e+05</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>393.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2333.000000</td>\n",
              "      <td>1.375508e+06</td>\n",
              "      <td>89.000000</td>\n",
              "      <td>738.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>23777.000000</td>\n",
              "      <td>2.133110e+06</td>\n",
              "      <td>188.000000</td>\n",
              "      <td>974.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>62794.000000</td>\n",
              "      <td>6.505195e+07</td>\n",
              "      <td>6449.000000</td>\n",
              "      <td>3922.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2fb3bc31-2bd0-4fe3-9ebe-75f60752eab8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2fb3bc31-2bd0-4fe3-9ebe-75f60752eab8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2fb3bc31-2bd0-4fe3-9ebe-75f60752eab8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 652
        },
        "id": "_k7H_Nef9CQL",
        "outputId": "06144126-d173-4ef3-ac3e-e443fbf2238d"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      talk_id                                             title  \\\n",
              "4000    62678       Crisis support for the world, one text away   \n",
              "4001    62782                      The dark history of IQ tests   \n",
              "4002    62263  How \"policing for profit\" undermines your rights   \n",
              "4003    62784      The electrifying speeches of Sojourner Truth   \n",
              "4004    62794              The most important anus in the ocean   \n",
              "\n",
              "                 speaker_1                 all_speakers  \\\n",
              "4000          Nancy Lublin          {0: 'Nancy Lublin'}   \n",
              "4001   Stefan C Dombrowski   {0: 'Stefan C Dombrowski'}   \n",
              "4002  Dick M. Carpenter II  {0: 'Dick M. Carpenter II'}   \n",
              "4003     Daina Ramey Berry     {0: 'Daina Ramey Berry'}   \n",
              "4004          Cella Wright          {0: 'Cella Wright'}   \n",
              "\n",
              "                   occupations  \\\n",
              "4000  {0: ['health activist']}   \n",
              "4001                       NaN   \n",
              "4002   {0: ['law researcher']}   \n",
              "4003                       NaN   \n",
              "4004                       NaN   \n",
              "\n",
              "                                         about_speakers   views recorded_date  \\\n",
              "4000  {0: 'Nancy Lublin, cofounder and CEO of Crisis...  502934    2020-04-22   \n",
              "4001                                                NaN  307187    2020-04-27   \n",
              "4002  {0: 'Dick M. Carpenter II studies cutting edge...  464414    2019-06-22   \n",
              "4003                                                NaN   56582    2020-04-28   \n",
              "4004                                                NaN       0    2020-04-30   \n",
              "\n",
              "     published_date                 event native_lang  \\\n",
              "4000     2020-04-27  TED2020: The Prequel          en   \n",
              "4001     2020-04-27                TED-Ed          en   \n",
              "4002     2020-04-28          TEDxMileHigh          en   \n",
              "4003     2020-04-30                TED-Ed          en   \n",
              "4004     2020-04-30                TED-Ed          en   \n",
              "\n",
              "                   available_lang  comments  duration  \\\n",
              "4000                       ['en']       6.0       690   \n",
              "4001  ['en', 'es', 'my', 'pt-br']       NaN       346   \n",
              "4002                       ['en']       9.0       774   \n",
              "4003                       ['en']       NaN       257   \n",
              "4004                       ['en']       NaN       281   \n",
              "\n",
              "                                                 topics  \\\n",
              "4000  ['activism', 'data', 'technology', 'mental hea...   \n",
              "4001  ['TED-Ed', 'education', 'history', 'animation'...   \n",
              "4002  ['society', 'law', 'policy', 'justice system',...   \n",
              "4003  ['TED-Ed', 'education', 'animation', 'United S...   \n",
              "4004  ['animals', 'TED-Ed', 'animation', 'oceans', '...   \n",
              "\n",
              "                                          related_talks  \\\n",
              "4000  {2362: 'How data from a crisis text line is sa...   \n",
              "4001  {35386: 'How does the Rorschach inkblot test w...   \n",
              "4002  {2406: 'I love being a police officer, but we ...   \n",
              "4003  {20973: 'The breathtaking courage of Harriet T...   \n",
              "4004  {62347: 'The bug that poops candy', 29159: 'In...   \n",
              "\n",
              "                                                    url  \\\n",
              "4000  https://www.ted.com/talks/nancy_lublin_crisis_...   \n",
              "4001  https://www.ted.com/talks/stefan_c_dombrowski_...   \n",
              "4002  https://www.ted.com/talks/dick_m_carpenter_ii_...   \n",
              "4003  https://www.ted.com/talks/daina_ramey_berry_th...   \n",
              "4004  https://www.ted.com/talks/cella_wright_the_mos...   \n",
              "\n",
              "                                            description  \\\n",
              "4000  What if we could help people in crisis anytime...   \n",
              "4001  In 1905, psychologists Alfred Binet and Théodo...   \n",
              "4002  Many countries have an active, centuries-old l...   \n",
              "4003  Isabella Baumfree was born into slavery in lat...   \n",
              "4004  Is it a fuzzy sock? An overripe banana? A mold...   \n",
              "\n",
              "                                             transcript  \n",
              "4000  \"I'm 14, and I want to go home.\" \"My name is B...  \n",
              "4001  In 1905, psychologists Alfred Binet and Théodo...  \n",
              "4002  Picture yourself driving down the road tomorro...  \n",
              "4003  In early 1828, Sojourner Truth approached the ...  \n",
              "4004  Can you guess what you’re looking at? Is it a ...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9f5ad805-f59b-4ab4-8484-e3e63be5b024\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>talk_id</th>\n",
              "      <th>title</th>\n",
              "      <th>speaker_1</th>\n",
              "      <th>all_speakers</th>\n",
              "      <th>occupations</th>\n",
              "      <th>about_speakers</th>\n",
              "      <th>views</th>\n",
              "      <th>recorded_date</th>\n",
              "      <th>published_date</th>\n",
              "      <th>event</th>\n",
              "      <th>native_lang</th>\n",
              "      <th>available_lang</th>\n",
              "      <th>comments</th>\n",
              "      <th>duration</th>\n",
              "      <th>topics</th>\n",
              "      <th>related_talks</th>\n",
              "      <th>url</th>\n",
              "      <th>description</th>\n",
              "      <th>transcript</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4000</th>\n",
              "      <td>62678</td>\n",
              "      <td>Crisis support for the world, one text away</td>\n",
              "      <td>Nancy Lublin</td>\n",
              "      <td>{0: 'Nancy Lublin'}</td>\n",
              "      <td>{0: ['health activist']}</td>\n",
              "      <td>{0: 'Nancy Lublin, cofounder and CEO of Crisis...</td>\n",
              "      <td>502934</td>\n",
              "      <td>2020-04-22</td>\n",
              "      <td>2020-04-27</td>\n",
              "      <td>TED2020: The Prequel</td>\n",
              "      <td>en</td>\n",
              "      <td>['en']</td>\n",
              "      <td>6.0</td>\n",
              "      <td>690</td>\n",
              "      <td>['activism', 'data', 'technology', 'mental hea...</td>\n",
              "      <td>{2362: 'How data from a crisis text line is sa...</td>\n",
              "      <td>https://www.ted.com/talks/nancy_lublin_crisis_...</td>\n",
              "      <td>What if we could help people in crisis anytime...</td>\n",
              "      <td>\"I'm 14, and I want to go home.\" \"My name is B...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4001</th>\n",
              "      <td>62782</td>\n",
              "      <td>The dark history of IQ tests</td>\n",
              "      <td>Stefan C Dombrowski</td>\n",
              "      <td>{0: 'Stefan C Dombrowski'}</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>307187</td>\n",
              "      <td>2020-04-27</td>\n",
              "      <td>2020-04-27</td>\n",
              "      <td>TED-Ed</td>\n",
              "      <td>en</td>\n",
              "      <td>['en', 'es', 'my', 'pt-br']</td>\n",
              "      <td>NaN</td>\n",
              "      <td>346</td>\n",
              "      <td>['TED-Ed', 'education', 'history', 'animation'...</td>\n",
              "      <td>{35386: 'How does the Rorschach inkblot test w...</td>\n",
              "      <td>https://www.ted.com/talks/stefan_c_dombrowski_...</td>\n",
              "      <td>In 1905, psychologists Alfred Binet and Théodo...</td>\n",
              "      <td>In 1905, psychologists Alfred Binet and Théodo...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4002</th>\n",
              "      <td>62263</td>\n",
              "      <td>How \"policing for profit\" undermines your rights</td>\n",
              "      <td>Dick M. Carpenter II</td>\n",
              "      <td>{0: 'Dick M. Carpenter II'}</td>\n",
              "      <td>{0: ['law researcher']}</td>\n",
              "      <td>{0: 'Dick M. Carpenter II studies cutting edge...</td>\n",
              "      <td>464414</td>\n",
              "      <td>2019-06-22</td>\n",
              "      <td>2020-04-28</td>\n",
              "      <td>TEDxMileHigh</td>\n",
              "      <td>en</td>\n",
              "      <td>['en']</td>\n",
              "      <td>9.0</td>\n",
              "      <td>774</td>\n",
              "      <td>['society', 'law', 'policy', 'justice system',...</td>\n",
              "      <td>{2406: 'I love being a police officer, but we ...</td>\n",
              "      <td>https://www.ted.com/talks/dick_m_carpenter_ii_...</td>\n",
              "      <td>Many countries have an active, centuries-old l...</td>\n",
              "      <td>Picture yourself driving down the road tomorro...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4003</th>\n",
              "      <td>62784</td>\n",
              "      <td>The electrifying speeches of Sojourner Truth</td>\n",
              "      <td>Daina Ramey Berry</td>\n",
              "      <td>{0: 'Daina Ramey Berry'}</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>56582</td>\n",
              "      <td>2020-04-28</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>TED-Ed</td>\n",
              "      <td>en</td>\n",
              "      <td>['en']</td>\n",
              "      <td>NaN</td>\n",
              "      <td>257</td>\n",
              "      <td>['TED-Ed', 'education', 'animation', 'United S...</td>\n",
              "      <td>{20973: 'The breathtaking courage of Harriet T...</td>\n",
              "      <td>https://www.ted.com/talks/daina_ramey_berry_th...</td>\n",
              "      <td>Isabella Baumfree was born into slavery in lat...</td>\n",
              "      <td>In early 1828, Sojourner Truth approached the ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4004</th>\n",
              "      <td>62794</td>\n",
              "      <td>The most important anus in the ocean</td>\n",
              "      <td>Cella Wright</td>\n",
              "      <td>{0: 'Cella Wright'}</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>TED-Ed</td>\n",
              "      <td>en</td>\n",
              "      <td>['en']</td>\n",
              "      <td>NaN</td>\n",
              "      <td>281</td>\n",
              "      <td>['animals', 'TED-Ed', 'animation', 'oceans', '...</td>\n",
              "      <td>{62347: 'The bug that poops candy', 29159: 'In...</td>\n",
              "      <td>https://www.ted.com/talks/cella_wright_the_mos...</td>\n",
              "      <td>Is it a fuzzy sock? An overripe banana? A mold...</td>\n",
              "      <td>Can you guess what you’re looking at? Is it a ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f5ad805-f59b-4ab4-8484-e3e63be5b024')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9f5ad805-f59b-4ab4-8484-e3e63be5b024 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9f5ad805-f59b-4ab4-8484-e3e63be5b024');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y8ZDWIi-9Iec",
        "outputId": "37004d1f-0f3d-41b3-c39d-0f23d81f4569"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['talk_id', 'title', 'speaker_1', 'all_speakers', 'occupations',\n",
              "       'about_speakers', 'views', 'recorded_date', 'published_date', 'event',\n",
              "       'native_lang', 'available_lang', 'comments', 'duration', 'topics',\n",
              "       'related_talks', 'url', 'description', 'transcript'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uVZ8L2p89ZDL",
        "outputId": "92eae507-5ec4-44c0-bd21-2bf9d5f6efaa"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 4005 entries, 0 to 4004\n",
            "Data columns (total 19 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   talk_id         4005 non-null   int64  \n",
            " 1   title           4005 non-null   object \n",
            " 2   speaker_1       4005 non-null   object \n",
            " 3   all_speakers    4001 non-null   object \n",
            " 4   occupations     3483 non-null   object \n",
            " 5   about_speakers  3502 non-null   object \n",
            " 6   views           4005 non-null   int64  \n",
            " 7   recorded_date   4004 non-null   object \n",
            " 8   published_date  4005 non-null   object \n",
            " 9   event           4005 non-null   object \n",
            " 10  native_lang     4005 non-null   object \n",
            " 11  available_lang  4005 non-null   object \n",
            " 12  comments        3350 non-null   float64\n",
            " 13  duration        4005 non-null   int64  \n",
            " 14  topics          4005 non-null   object \n",
            " 15  related_talks   4005 non-null   object \n",
            " 16  url             4005 non-null   object \n",
            " 17  description     4005 non-null   object \n",
            " 18  transcript      4005 non-null   object \n",
            "dtypes: float64(1), int64(3), object(15)\n",
            "memory usage: 594.6+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wo2FsLwf9cum",
        "outputId": "f510fab6-f89a-4ad3-9bcb-e4353134d26a"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isna().sum()\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BnXlDmcVqmc0",
        "outputId": "d342432a-c9ee-4aac-edb3-0e5c44439266"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "talk_id             0\n",
              "title               0\n",
              "speaker_1           0\n",
              "all_speakers        4\n",
              "occupations       522\n",
              "about_speakers    503\n",
              "views               0\n",
              "recorded_date       1\n",
              "published_date      0\n",
              "event               0\n",
              "native_lang         0\n",
              "available_lang      0\n",
              "comments          655\n",
              "duration            0\n",
              "topics              0\n",
              "related_talks       0\n",
              "url                 0\n",
              "description         0\n",
              "transcript          0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "popular_df=df.nlargest(5,['views'])\n",
        "popular_df[['speaker_1','views','title']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "8YT0ELiDq0wg",
        "outputId": "611d5fd1-ae45-4634-b937-5e2dae145f22"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             speaker_1     views  \\\n",
              "4     Sir Ken Robinson  65051954   \n",
              "1296         Amy Cuddy  57074270   \n",
              "2062      James Veitch  56932551   \n",
              "646        Simon Sinek  49730580   \n",
              "796        Brené Brown  47544833   \n",
              "\n",
              "                                                  title  \n",
              "4                           Do schools kill creativity?  \n",
              "1296           Your body language may shape who you are  \n",
              "2062  This is what happens when you reply to spam email  \n",
              "646                    How great leaders inspire action  \n",
              "796                          The power of vulnerability  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7b62f10c-5774-4fbf-a414-585882ee5ae9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>speaker_1</th>\n",
              "      <th>views</th>\n",
              "      <th>title</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Sir Ken Robinson</td>\n",
              "      <td>65051954</td>\n",
              "      <td>Do schools kill creativity?</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1296</th>\n",
              "      <td>Amy Cuddy</td>\n",
              "      <td>57074270</td>\n",
              "      <td>Your body language may shape who you are</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2062</th>\n",
              "      <td>James Veitch</td>\n",
              "      <td>56932551</td>\n",
              "      <td>This is what happens when you reply to spam email</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>646</th>\n",
              "      <td>Simon Sinek</td>\n",
              "      <td>49730580</td>\n",
              "      <td>How great leaders inspire action</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>796</th>\n",
              "      <td>Brené Brown</td>\n",
              "      <td>47544833</td>\n",
              "      <td>The power of vulnerability</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7b62f10c-5774-4fbf-a414-585882ee5ae9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7b62f10c-5774-4fbf-a414-585882ee5ae9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7b62f10c-5774-4fbf-a414-585882ee5ae9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,5))\n",
        "plt.title('Speaker Most Popular video')\n",
        "sns.barplot(x='speaker_1',y='views',data=popular_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 368
        },
        "id": "nmGH7VeTrz0Y",
        "outputId": "2f32adb0-f0c1-4a11-def7-10d59358e7c7"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff4ced20b10>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#finding most popular speaker from the dataset\n",
        "pop_speaker_df=df.groupby('speaker_1').agg({'views' : 'sum'}).nlargest(15,['views'])\n",
        "pop_speaker_df.reset_index(inplace=True)\n",
        "pop_speaker_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "id": "qLOxOKt2sYdn",
        "outputId": "0d3a4001-8d82-46c6-8079-a0b2de5d7922"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           speaker_1      views\n",
              "0       Alex Gendler  117619583\n",
              "1   Sir Ken Robinson   84380518\n",
              "2       James Veitch   78843641\n",
              "3        Simon Sinek   62661183\n",
              "4        Brené Brown   61285977\n",
              "5         Bill Gates   57107176\n",
              "6          Amy Cuddy   57074270\n",
              "7    Julian Treasure   54799681\n",
              "8       Hans Rosling   39871561\n",
              "9          Tim Urban   37976820\n",
              "10   Cameron Russell   33874546\n",
              "11         Sam Berns   33691484\n",
              "12    Chris Anderson   32598679\n",
              "13  Robert Waldinger   32396714\n",
              "14      Esther Perel   31460367"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f155dc32-e3cb-4000-812b-44e57fdd33d4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>speaker_1</th>\n",
              "      <th>views</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Alex Gendler</td>\n",
              "      <td>117619583</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Sir Ken Robinson</td>\n",
              "      <td>84380518</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>James Veitch</td>\n",
              "      <td>78843641</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Simon Sinek</td>\n",
              "      <td>62661183</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Brené Brown</td>\n",
              "      <td>61285977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Bill Gates</td>\n",
              "      <td>57107176</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Amy Cuddy</td>\n",
              "      <td>57074270</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Julian Treasure</td>\n",
              "      <td>54799681</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Hans Rosling</td>\n",
              "      <td>39871561</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Tim Urban</td>\n",
              "      <td>37976820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Cameron Russell</td>\n",
              "      <td>33874546</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Sam Berns</td>\n",
              "      <td>33691484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Chris Anderson</td>\n",
              "      <td>32598679</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Robert Waldinger</td>\n",
              "      <td>32396714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Esther Perel</td>\n",
              "      <td>31460367</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f155dc32-e3cb-4000-812b-44e57fdd33d4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f155dc32-e3cb-4000-812b-44e57fdd33d4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f155dc32-e3cb-4000-812b-44e57fdd33d4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#printing most popular Speaker according to total views on their talks\n",
        "plt.figure(figsize=(20,6))\n",
        "plt.title('Most popular Speaker according to total views on their talks')\n",
        "sns.barplot(x='speaker_1',y='views',data=pop_speaker_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "OlvofuzAwEfh",
        "outputId": "4079562d-0cdd-4f7a-e5e0-166c915003d6"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff4cc8be6d0>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#printing the len of unique values in event column\n",
        "len(df.event.unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hrBazfHHwKZD",
        "outputId": "60b44eb8-751e-4f97-85c1-aec3469209c8"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "459"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#let's find the most frequent event categories\n",
        "freq_event_df=df[['event','views']].groupby('event').agg({'views' : 'count'}).nlargest(10,['views'])\n",
        "freq_event_df.reset_index(inplace=True)\n",
        "freq_event_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "c7_4L1dnwTLo",
        "outputId": "bb01927a-cac5-4d81-a6fa-3608c082fcc1"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     event  views\n",
              "0   TED-Ed    556\n",
              "1  TED2017     96\n",
              "2  TED2018     96\n",
              "3  TED2019     91\n",
              "4  TED2014     84\n",
              "5  TED2009     81\n",
              "6  TED2013     75\n",
              "7  TED2015     75\n",
              "8  TED2016     75\n",
              "9  TED2011     70"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b4bf16c5-48b4-4a54-a105-84ed025db112\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>event</th>\n",
              "      <th>views</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>TED-Ed</td>\n",
              "      <td>556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>TED2017</td>\n",
              "      <td>96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>TED2018</td>\n",
              "      <td>96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>TED2019</td>\n",
              "      <td>91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>TED2014</td>\n",
              "      <td>84</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>TED2009</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>TED2013</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>TED2015</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>TED2016</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>TED2011</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4bf16c5-48b4-4a54-a105-84ed025db112')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b4bf16c5-48b4-4a54-a105-84ed025db112 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b4bf16c5-48b4-4a54-a105-84ed025db112');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(15,6))\n",
        "plt.title('Most frequent event')\n",
        "sns.barplot(x='event',y='views',data=freq_event_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "_8s6k2Mhwcfz",
        "outputId": "8f15053c-3e4a-4a06-b107-b6a340b0dc34"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff4cc2886d0>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pop_event_df=df[['event','views']].groupby('event').agg({'views': 'sum'}).nlargest(10,['views'])\n",
        "pop_event_df.reset_index(inplace=True)\n",
        "pop_event_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "OEAW0G9WxCEx",
        "outputId": "95f64947-de19-47e0-8d3a-f39801e81b3e"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            event       views\n",
              "0          TED-Ed  1145357780\n",
              "1         TED2015   247702961\n",
              "2         TED2014   240295871\n",
              "3  TEDGlobal 2013   235410234\n",
              "4         TED2017   227847725\n",
              "5         TED2016   227358612\n",
              "6         TED2013   225967516\n",
              "7         TED2012   197746106\n",
              "8         TED2018   196346377\n",
              "9         TED2009   191190144"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a72300b5-7edd-4739-9d8e-fb8dd08f745d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>event</th>\n",
              "      <th>views</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>TED-Ed</td>\n",
              "      <td>1145357780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>TED2015</td>\n",
              "      <td>247702961</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>TED2014</td>\n",
              "      <td>240295871</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>TEDGlobal 2013</td>\n",
              "      <td>235410234</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>TED2017</td>\n",
              "      <td>227847725</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>TED2016</td>\n",
              "      <td>227358612</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>TED2013</td>\n",
              "      <td>225967516</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>TED2012</td>\n",
              "      <td>197746106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>TED2018</td>\n",
              "      <td>196346377</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>TED2009</td>\n",
              "      <td>191190144</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a72300b5-7edd-4739-9d8e-fb8dd08f745d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a72300b5-7edd-4739-9d8e-fb8dd08f745d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a72300b5-7edd-4739-9d8e-fb8dd08f745d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(15,6))\n",
        "plt.title('Most popular event category')\n",
        "sns.barplot(x='event',y='views',data=pop_event_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "JWT41xtKyPXi",
        "outputId": "9bfbbc57-5d5f-42f2-e339-c324000c294a"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff4cc19f650>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.native_lang.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rk_bgnTfyn39",
        "outputId": "df791ec8-bc02-4c9b-c8fe-b05777ab9e78"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "en       3957\n",
              "es         27\n",
              "fr          9\n",
              "ja          3\n",
              "hi          2\n",
              "de          1\n",
              "pt          1\n",
              "ko          1\n",
              "zh-cn       1\n",
              "ar          1\n",
              "pt-br       1\n",
              "it          1\n",
              "Name: native_lang, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "plt.title('Native language')\n",
        "sns.countplot(df['native_lang'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 422
        },
        "id": "b4CiFjYRyzwa",
        "outputId": "48fad60e-12b5-4bbb-f24c-b82a9fb34bbd"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff4cbf22750>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(df['occupations'].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bq3S-X1fzEOx",
        "outputId": "2986f45e-b254-4fad-a0e9-eaca8ae36544"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2050"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['occupations'].isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yWsmchzFz_02",
        "outputId": "b4b07074-18a3-49d6-9875-8d978cdee260"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "522"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We have 522 Nan values in occupations column.\n",
        "Let's replace those NaN values with another category called 'other'."
      ],
      "metadata": {
        "id": "p4zbt3AX0rs4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import datetime\n",
        "df['published_date'] = df['published_date'].apply(lambda x: datetime.datetime.strptime(x,\"%Y-%m-%d\"))"
      ],
      "metadata": {
        "id": "3mjQ7Mvc4knd"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df['release_day'] = df['published_date'].apply(lambda x: x.weekday())\n",
        "df['release_month']=df['published_date'].apply(lambda x: x.month)\n",
        "df['release_year'] = df['published_date'].apply(lambda x: x.year)"
      ],
      "metadata": {
        "id": "4GUR3RVz57Ea"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "week_day={0:'Monday',1:'Tuesday',2:'Wednesday',3:'Thursday',4:'Friday',5:'Saturday',6:'Sunday'}\n",
        "df['release_day']=df['release_day'].map(week_day)"
      ],
      "metadata": {
        "id": "Kzp_2ump5_Bb"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "freq_rel_day=df[['release_day','views']].groupby('release_day').agg({'views' : 'count'})\n",
        "freq_rel_day=freq_rel_day.sort_values('views',ascending=False)\n",
        "freq_rel_day.reset_index(inplace=True)\n",
        "freq_rel_day"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "ZiZr69lF6DXd",
        "outputId": "0af780bc-4360-4cb0-98a2-30b3ae961c19"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  release_day  views\n",
              "0     Tuesday    857\n",
              "1    Thursday    832\n",
              "2      Friday    789\n",
              "3      Monday    727\n",
              "4   Wednesday    703\n",
              "5      Sunday     55\n",
              "6    Saturday     42"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-36d837cf-7834-454a-9cb5-26a213c32b05\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>release_day</th>\n",
              "      <th>views</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Tuesday</td>\n",
              "      <td>857</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Thursday</td>\n",
              "      <td>832</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Friday</td>\n",
              "      <td>789</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Monday</td>\n",
              "      <td>727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>703</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Sunday</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Saturday</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-36d837cf-7834-454a-9cb5-26a213c32b05')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-36d837cf-7834-454a-9cb5-26a213c32b05 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-36d837cf-7834-454a-9cb5-26a213c32b05');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(15,6))\n",
        "plt.title('Most Frequent release date')\n",
        "sns.barplot(x='release_day',y='views',data=freq_rel_day)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 422
        },
        "id": "468fmgVi6L09",
        "outputId": "ca31bdcd-ae6f-4136-dc6d-de7f8a985a14"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff4cbffbcd0>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "BB_GWN1H6uB7"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}